/* Mixins */

/// Helper to clear inner floats
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
@mixin clearfix {
    &:after {
        content: '';
        display: table;
        clear: both;
    }
}

/// Helper to cut text with an ellipse
@mixin ellipsis {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

/// Helper to size an element
/// @author Hugo Giraudel
/// @param {Length} $width
/// @param {Length} $height
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

// Arrow helper mixin
// ---
// @param [string] $direction: arrow direction
// @param [list] $position: list of offsets and values
// @param [color] $color (inherit): arrow color
// @param [number] $size (1em): arrow size
// ---
@mixin triangle($direction, $position, $color: currentColor, $size: 1em) {
    // Make sure the direction is valid
    @if not index(top right bottom left, $direction) {
        @warn "Direction must be one of top, right, bottom or left.";
    } @else {
        @include absolute($position); // Position
        @include size(0); // Size
        content: '';
        z-index: 2;

        border-#{opposite-position($direction)}: $size * 1.5 solid $color;
        $perpendicular-borders: $size solid transparent;

        @if $direction == top or $direction == bottom {
            border-left: $perpendicular-borders;
            border-right: $perpendicular-borders;
        } @else if $direction == right or $direction == left {
            border-bottom: $perpendicular-borders;
            border-top: $perpendicular-borders;
        }
    }
}

@mixin grid-child($col-start, $col-end, $row-start, $row-end) {
    grid-column: #{$col-start}/#{$col-end};
    grid-row: span #{$row-end};
    -ms-grid-column: $col-start;
    -ms-grid-column-span: $col-end - $col-start;
    // -ms-grid-row: $row-start;
    @if $row-start == 'auto' {
        $row-start: 0;
    }
    -ms-grid-row-span: $row-end - $row-start;
}

@mixin grid-loop($columns, $loop-number) {
    @for $i from 1 through $loop-number {
        &:nth-child(#{$i}) {
            @for $col from 0 through $columns - 1 {
                @if $i % $columns == $col {
                    $c: $col;
                    $j: $col / $columns + ($c - $columns) / $columns;
                    @if $col == 0 {
                        $c: $columns;
                    }
                    @include grid-child($c * 2 - 1, $c * 2, $j, $j + 1);
                }
            }
            // @if $i % 4 == 0 {
            //     $j: $i / 4;
            //     @include grid-child(7, 8, $j, $j + 1);
            // } @else if $i % 4 == 3 {
            //     $j: $i / 4 + 1 / 4;
            //     @include grid-child(5, 6, $j, $j + 1);
            // } @else if $i % 4 == 2 {
            //     $j: $i / 4 + 1 / 2;
            //     @include grid-child(3, 4, $j, $j + 1);
            // } @else {
            //     $j: $i / 4 + 3 / 4;
            //     @include grid-child(1, 2, $j, $j + 1);
            // }
        }
    }
}

// Grid
@function grid-column-pixels(
    $container-size,
    $gap-size,
    $wanted-col-number,
    $total-col-number
) {
    // @return ($container-size - $gap-size / ($columns-number - 1)) /
    //     $columns-number;
    @return (
            ($container-size - ($gap-size * ($total-col-number - 1))) /
                $total-col-number
        ) * $wanted-col-number + $gap-size * ($wanted-col-number - 1);
}

@function grid-column-percent(
    $container-size,
    $gap-size,
    $wanted-col-number,
    $total-col-number
) {
    $gap-percent: $gap-size / $container-size * 100;
    $total-gap: $gap-percent * ($total-col-number - 1);
    $col-width: (100 - $total-gap) / $total-col-number;
    @return $col-width * $wanted-col-number + $gap-percent *
        ($wanted-col-number - 1);
}

// Fonts
// @mixin font($size){
//     font-family: $font;
//     font-size: $size;
// }
